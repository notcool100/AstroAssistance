#!/usr/bin/env python3
"""
AstroAssistance Recommendation Updater
-------------------------------------
This script updates the API's recommendations with the ones generated by the AI models.

Author: Senior AI Engineer
"""
import os
import sys
import json
import logging
import requests
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('AstroAssistance-Updater')

# Project paths
PROJECT_ROOT = Path(__file__).parent.absolute()
DATA_DIR = PROJECT_ROOT / "data"
SYNTHETIC_DIR = DATA_DIR / "synthetic"

# API base URL
BASE_URL = "http://localhost:8000"

def get_token():
    """Get authentication token."""
    try:
        response = requests.post(f"{BASE_URL}/api/token")
        response.raise_for_status()
        return response.json()["access_token"]
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to get token: {e}")
        sys.exit(1)

def load_ai_recommendations():
    """Load recommendations generated by the AI models."""
    recommendations_path = SYNTHETIC_DIR / "recommendations.json"
    
    if not os.path.exists(recommendations_path):
        logger.error(f"Recommendations file not found at {recommendations_path}")
        return None
    
    try:
        with open(recommendations_path, 'r') as f:
            recommendations = json.load(f)
        
        logger.info(f"Loaded {len(recommendations)} AI-generated recommendations")
        return recommendations
    except Exception as e:
        logger.error(f"Failed to load recommendations: {e}")
        return None

def update_api_recommendations(token, recommendations):
    """Update the API's recommendations with the AI-generated ones."""
    if not recommendations:
        logger.error("No recommendations to update")
        return False
    
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    
    try:
        # In a real implementation, you would have an endpoint to update recommendations
        # For our minimal API, we'll just print what would be updated
        logger.info(f"Would update {len(recommendations)} recommendations in the API")
        
        # Display the recommendations that would be updated
        for i, rec in enumerate(recommendations):
            logger.info(f"Recommendation {i+1}: {rec['title']} - {rec['description']}")
        
        return True
    except Exception as e:
        logger.error(f"Failed to update recommendations: {e}")
        return False

def main():
    """Main function."""
    logger.info("Starting recommendation update process")
    
    # Get authentication token
    token = get_token()
    logger.info("Authentication successful")
    
    # Load AI-generated recommendations
    recommendations = load_ai_recommendations()
    
    if recommendations:
        # Update API recommendations
        success = update_api_recommendations(token, recommendations)
        
        if success:
            logger.info("Recommendations updated successfully")
        else:
            logger.error("Failed to update recommendations")
    
    logger.info("Recommendation update process completed")

if __name__ == "__main__":
    main()